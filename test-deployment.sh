#!/bin/bash

echo "üöÄ Test de d√©ploiement pour Xarala Bootcamp API"
echo "================================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

print_status "V√©rification de l'environnement..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©"
    exit 1
fi

NODE_VERSION=$(node --version)
print_success "Node.js version: $NODE_VERSION"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©"
    exit 1
fi

print_success "npm est disponible"

# V√©rifier les fichiers de configuration
print_status "V√©rification des fichiers de configuration..."

REQUIRED_FILES=("package.json" "nest-cli.json" "tsconfig.json" "Dockerfile" "render.yaml")
for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        print_success "‚úì $file"
    else
        print_error "‚úó $file manquant"
        exit 1
    fi
done

# V√©rifier les d√©pendances
print_status "V√©rification des d√©pendances..."

if [ ! -d "node_modules" ]; then
    print_warning "node_modules n'existe pas, installation des d√©pendances..."
    npm install
    if [ $? -ne 0 ]; then
        print_error "√âchec de l'installation des d√©pendances"
        exit 1
    fi
fi

print_success "D√©pendances install√©es"

# Test de build
print_status "Test de build..."

npm run build
if [ $? -ne 0 ]; then
    print_error "√âchec du build"
    exit 1
fi

print_success "Build r√©ussi"

# V√©rifier que dist/ existe
if [ ! -d "dist" ]; then
    print_error "Le dossier dist/ n'existe pas apr√®s le build"
    exit 1
fi

print_success "Dossier dist/ cr√©√©"

# V√©rifier les fichiers de migration
print_status "V√©rification des migrations..."

if [ -f "src/database/migrations/1700000000000-InitialMigration.ts" ]; then
    print_success "‚úì Migration initiale"
else
    print_warning "‚ö† Migration initiale manquante"
fi

# V√©rifier les scripts de seed
print_status "V√©rification des scripts de seed..."

if [ -f "seed.js" ]; then
    print_success "‚úì Script de seed local"
else
    print_warning "‚ö† Script de seed local manquant"
fi

if [ -f "seed-production.js" ]; then
    print_success "‚úì Script de seed production"
else
    print_warning "‚ö† Script de seed production manquant"
fi

# V√©rifier la configuration de la base de donn√©es
print_status "V√©rification de la configuration de la base de donn√©es..."

if [ -f "src/config/database.config.ts" ]; then
    print_success "‚úì Configuration de base de donn√©es"
else
    print_error "‚úó Configuration de base de donn√©es manquante"
    exit 1
fi

# V√©rifier les entit√©s
print_status "V√©rification des entit√©s..."

ENTITIES=("Admin" "Bootcamp" "Lead")
for entity in "${ENTITIES[@]}"; do
    if [ -f "src/database/entities/${entity}.entity.ts" ]; then
        print_success "‚úì Entit√© $entity"
    else
        print_error "‚úó Entit√© $entity manquante"
        exit 1
    fi
done

# V√©rifier les modules
print_status "V√©rification des modules..."

MODULES=("auth" "bootcamps" "leads")
for module in "${MODULES[@]}"; do
    if [ -d "src/modules/$module" ]; then
        print_success "‚úì Module $module"
    else
        print_error "‚úó Module $module manquant"
        exit 1
    fi
done

# V√©rifier les tests
print_status "V√©rification des tests..."

if [ -d "test" ]; then
    print_success "‚úì Dossier de tests"
else
    print_warning "‚ö† Dossier de tests manquant"
fi

# V√©rifier le Dockerfile
print_status "V√©rification du Dockerfile..."

if [ -f "Dockerfile" ]; then
    print_success "‚úì Dockerfile"
else
    print_error "‚úó Dockerfile manquant"
    exit 1
fi

# V√©rifier render.yaml
print_status "V√©rification de render.yaml..."

if [ -f "render.yaml" ]; then
    print_success "‚úì render.yaml"
else
    print_error "‚úó render.yaml manquant"
    exit 1
fi

# V√©rifier les endpoints de sant√©
print_status "V√©rification des endpoints de sant√©..."

if [ -f "src/app.controller.ts" ]; then
    print_success "‚úì Contr√¥leur principal avec health check"
else
    print_error "‚úó Contr√¥leur principal manquant"
    exit 1
fi

# Test de linting
print_status "Test de linting..."

npm run lint
if [ $? -ne 0 ]; then
    print_warning "‚ö† Probl√®mes de linting d√©tect√©s"
else
    print_success "‚úì Linting r√©ussi"
fi

# Test des tests unitaires
print_status "Test des tests unitaires..."

npm test
if [ $? -ne 0 ]; then
    print_warning "‚ö† Certains tests ont √©chou√©"
else
    print_success "‚úì Tests unitaires r√©ussis"
fi

echo ""
echo "üéâ R√©sum√© du test de d√©ploiement"
echo "================================"
print_success "‚úÖ L'application est pr√™te pour le d√©ploiement sur Render !"
echo ""
echo "üìã Prochaines √©tapes :"
echo "1. Poussez votre code sur GitHub"
echo "2. Connectez votre d√©p√¥t √† Render"
echo "3. Cr√©ez un nouveau Blueprint"
echo "4. Render utilisera automatiquement render.yaml"
echo ""
echo "üìñ Pour plus de d√©tails, consultez DEPLOYMENT.md"
echo ""
print_status "üîó URLs apr√®s d√©ploiement :"
echo "   - Health check: https://votre-app.onrender.com/api/health"
echo "   - Documentation: https://votre-app.onrender.com/api/docs"
echo "   - Page d'accueil: https://votre-app.onrender.com/"
echo ""
print_status "üë§ Compte admin par d√©faut :"
echo "   - Email: admin@xarala.sn"
echo "   - Mot de passe: admin123"
echo ""
print_success "ÔøΩÔøΩ Bon d√©ploiement !" 